#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/params.fc";

{-
recv_internal:
    1. Update smc code
    2. Transfer message to owner
    3. Deposit (simple send)
    4. Owner withdraw 
    5. Change owner

recv_external:
    1. Selfdestruct (burn smc)
-}

const int min_tons_for_storage = 100000000; ;; 0.1 TON

(int, int, slice) load_data() inline_ref {
    slice sc = get_data().begin_parse();
    return (sc~load_uint(32), sc~load_uint(256), sc~load_msg_addr());
}

() save_data(int seqno, int public_key, slice owner_addr) impure inline {
    set_data(
        begin_cell()
            .store_uint(seqno, 32)
            .store_uint(public_key, 256)
            .store_slice(owner_addr)
        .end_cell()
    );
}



() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice sc = in_msg_full.begin_parse();
    int flags = sc~load_uint(4);
    if (flags & 1) {
        return();
    }
    slice sender_addr = sc~load_msg_addr();

    if (in_msg_body.slice_empty?()) {
        return ();
    }

    (int seqno, int public_key, slice owner_addr) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    if (op == "deposit"c) {
        return ();
    }

    if (op == "transfer_msg_to_owner"c) {
        throw_if(403, equal_slices(sender_addr, owner_addr));
        cell msg_cell = begin_cell().store_slice(in_msg_body).end_cell();

        cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(owner_addr)
                    .store_coins(0)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(msg_cell)
        .end_cell();

        send_raw_message(msg, 64);
        return ();
    };

    throw_unless(404, equal_slices(sender_addr,owner_addr));

    if (op == "change_owner"c) {
        slice new_owner_addr = in_msg_body~load_msg_addr();

        force_chain(new_owner_addr);

        save_data(seqno, public_key, new_owner_addr);
        return ();
    }

    if (op == "withdraw_funds"c) {

        int withdraw_amount = in_msg_body~load_coins();
        throw_unless(405, my_balance >= withdraw_amount);
        int send_amount = min(withdraw_amount, my_balance - min_tons_for_storage);
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_addr)
            .store_coins(send_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();

        send_raw_message(msg, 1);
        return ();
    }

    if (op == "update code"c) {
        cell new_code = sc~load_ref();
        set_code(new_code);

        cont old_code = get_c3(); ;; get old SC code
        set_c3(new_code.begin_parse().bless()); ;; save new SC code

        throw(0);
    }

    throw(0xffffff); ;; conventional exit code for no opcode
}

() recv_external(slice in_msg) impure {
    var signature = in_msg~load_bits(512);
    slice tmp_in_msg = in_msg;
    var hash = in_msg.slice_hash();

    (int seqno, int public_key, slice owner_addr) = load_data();
    throw_unless(401,  check_signature(hash, signature, public_key));
    
    int msg_seqno = tmp_in_msg~load_uint(32);
    throw_unless(402, seqno == msg_seqno);

    accept_message(); ;; здесь мы выставляем максимальный лимит по газу и утверждаем что мы готовы залпатить за внешнее сообщение

    tmp_in_msg~touch(); ;; здесь мы кладем принятое сообщение на верхушку стека контракта

    int op = in_msg~load_uint(32);

    if (op == "selfdestruct"c) {
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_addr)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();

        send_raw_message(msg, 128 + 32);
    }

    save_data(seqno + 1, public_key, owner_addr);
}

int get_seqno() method_id  {
    (int seqno, _, _) = load_data();
    return seqno;
}

slice get_owner_addr() method_id {
    (_, _, slice owner_addr) = load_data();
    return owner_addr;
}